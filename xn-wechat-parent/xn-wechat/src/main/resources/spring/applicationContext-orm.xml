<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	    http://www.springframework.org/schema/context
	    http://www.springframework.org/schema/context/spring-context-3.2.xsd
	    http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	    http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	    http://www.springframework.org/schema/util 
	    http://www.springframework.org/schema/util/spring-util-3.2.xsd">
	
	<!-- 引入jdbc配置文件 -->
	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
       <property name="properties" ref="defaultJdbcConfigProperties"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <array>
                <value>file:/etc/xiaoniu/xn-wechat/jdbc.properties</value>
                <value>file:/etc/xiaoniu/xn-wechat/dubbo.properties</value>
                <value>file:/etc/xiaoniu/xn-wechat/wechat.properties</value>
            </array>
        </property>
    </bean>


    <bean id="defaultJdbcConfigProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <array> 
                <value>classpath:/jdbc.properties</value>
                <value>classpath:/dubbo.properties</value>
                 <value>classpath:/wechat.properties</value>
            </array>
        </property>
    </bean>
	
	
    <!-- 开启注解配置 -->
    <context:annotation-config />
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="maxActive" value="100"/>
        <property name="initialSize" value="20"/>
        <property name="maxWait" value="60000"/>
        <property name="minIdle" value="10"/>
        <property name="timeBetweenEvictionRunsMillis" value="600000"/>
        <property name="minEvictableIdleTimeMillis" value="3000000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="maxOpenPreparedStatements" value="20"/>
        <property name="removeAbandoned" value="true"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="true"/>
        <!-- 关闭abanded连接时输出错误日志 -->
         <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />     
        <property name="maxPoolPreparedStatementPerConnectionSize" value="500" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
			                监控统计用的filter:stat
			                日志用的filter:log4j
			               防御SQL注入的filter:wall -->
         <property name="filters" value="stat" />
    </bean>
    
    <!--事务管理器配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
 	<!--启动事物注解驱动-->
    <!-- 可设置代理模式 proxy-target-class="true" (代理模式自己不会创建事物,只会使用当前调用方法开启的事物) -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- mybatis 实体配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="dataSource" ref="dataSource" />
    </bean>
    
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" 
		p:basePackage="cn.xn.wechat.*.mapper" p:sqlSessionFactoryBeanName="sqlSessionFactory"  >
		<property name="markerInterface" value="cn.xn.freamwork.support.orm.mapper.BaseMapper"/>
	</bean>

    <!-- 接口映射
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
         <property name="basePackage" value="cn.xn.wechat.web.*" />
         <property name="sqlSessionFactoryBeanName" ref="sqlSessionFactory" />
         markerInterface接口的子接口都参与到这个扫描  
         <property name="markerInterface" value="cn.xn.freamwork.support.orm.mapper.BaseMapper"/>
    </bean> -->

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
</beans>